@use "sass:math";

// number of columns we want to set in our grid i.e. For eg: 12
$grid-columns: 12;

// base layout classes
.container {
    width: 100%;
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
    box-sizing: border-box;
}

// This class is gonna be for row of the grid elements,
// if we're using column classes then they're going to
// go inside a row later on
.row {
    display: flex;
    flex-flow: row wrap;
}

// column classes i.e. For eg: .col-xs-12 .col-md-6
// In the past when we've used a mixin we've created some kind of selector class
// then we've placed the mixin inside it but now we're not doing that, now we're
// just placing the mixin on the outside & on inside we're gonna create some kind
// of selector.
@include xs {
    @for $i from 1 through $grid-columns {
        .col-#{$i}-xs {
            box-sizing: border-box;
            flex-grow: 0;
            // This math module uses BODMAS rule for calculation
            width: math.div($i * 100%, $grid-columns);
        }
    }
}

@include sm {
    @for $i from 1 through $grid-columns {
        .col-#{$i}-sm {
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div($i * 100%, $grid-columns);
        }
    }
}

@include md {
    @for $i from 1 through $grid-columns {
        .col-#{$i}-md {
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div($i * 100%, $grid-columns);
        }
    }
}

@include lg {
    @for $i from 1 through $grid-columns {
        .col-#{$i}-lg {
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div($i * 100%, $grid-columns);
        }
    }
}

@include xl {
    @for $i from 1 through $grid-columns {
        .col-#{$i}-xl {
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div($i * 100%, $grid-columns);
        }
    }
}