$breakpoints: (
    "xs": 0,
    "sm": 480px,
    "md": 720px,
    "lg": 960px,
    "xl": 1200px,
);

// If we return to one of our components and use that mixin by stating
// @xs{...}, adding property like font-size and setting that equals to
// 10px and the property we have just added is content. However, we don't
// want to hard code these properties inside the mixin while creating it,
// as this would prevent the mixin from being reused and would result in
// the font-size always being set to 10px. Thus, we make advantage of
// @content rule, and the properties we set up inside that mixin will be
// applied where the @content is when we invoke it inside other components.
@mixin xs {
    @media (min-width: map-get($breakpoints, "xs")) {  
        @content;
    }
}

@mixin sm {
    @media (min-width: map-get($breakpoints, "sm")) {  
        @content;
    }
}

@mixin md {
    @media (min-width: map-get($breakpoints, "md")) {  
        @content;
    }
}

@mixin lg {
    @media (min-width: map-get($breakpoints, "lg")) {  
        @content;
    }
}

@mixin xl {
    @media (min-width: map-get($breakpoints, "xl")) {  
        @content;
    }
}

// This is more kind of flexible mixin for breakpoints not defined among above ones
@mixin breakpoint($bp: 0) {     // default value of $bp will be 0 if we don't pass any value
    @media (min-width: $bp) {  
        @content;
    }
}


// test selector
.responsive-test {
    @include xs {
      color: red;
    }

    @include sm {
      color: blue;
    }

    @include md {
      color: green;
    }

    @include lg {
      color: purple;
    }

    @include xl {
      color: orange;
    }
    
    @include breakpoint(1400px) {
      color: pink;
    }
}